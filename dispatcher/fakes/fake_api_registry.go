// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"

	"github.com/glestaris/clique/api"
	"github.com/glestaris/clique/api/registry"
	"github.com/glestaris/clique/dispatcher"
)

type FakeApiRegistry struct {
	RegisterTransferStub        func(spec api.TransferSpec, stater registry.TransferStater)
	registerTransferMutex       sync.RWMutex
	registerTransferArgsForCall []struct {
		spec   api.TransferSpec
		stater registry.TransferStater
	}
	RegisterResultsStub        func(ip net.IP, res api.TransferResults)
	registerResultsMutex       sync.RWMutex
	registerResultsArgsForCall []struct {
		ip  net.IP
		res api.TransferResults
	}
}

func (fake *FakeApiRegistry) RegisterTransfer(spec api.TransferSpec, stater registry.TransferStater) {
	fake.registerTransferMutex.Lock()
	fake.registerTransferArgsForCall = append(fake.registerTransferArgsForCall, struct {
		spec   api.TransferSpec
		stater registry.TransferStater
	}{spec, stater})
	fake.registerTransferMutex.Unlock()
	if fake.RegisterTransferStub != nil {
		fake.RegisterTransferStub(spec, stater)
	}
}

func (fake *FakeApiRegistry) RegisterTransferCallCount() int {
	fake.registerTransferMutex.RLock()
	defer fake.registerTransferMutex.RUnlock()
	return len(fake.registerTransferArgsForCall)
}

func (fake *FakeApiRegistry) RegisterTransferArgsForCall(i int) (api.TransferSpec, registry.TransferStater) {
	fake.registerTransferMutex.RLock()
	defer fake.registerTransferMutex.RUnlock()
	return fake.registerTransferArgsForCall[i].spec, fake.registerTransferArgsForCall[i].stater
}

func (fake *FakeApiRegistry) RegisterResults(ip net.IP, res api.TransferResults) {
	fake.registerResultsMutex.Lock()
	fake.registerResultsArgsForCall = append(fake.registerResultsArgsForCall, struct {
		ip  net.IP
		res api.TransferResults
	}{ip, res})
	fake.registerResultsMutex.Unlock()
	if fake.RegisterResultsStub != nil {
		fake.RegisterResultsStub(ip, res)
	}
}

func (fake *FakeApiRegistry) RegisterResultsCallCount() int {
	fake.registerResultsMutex.RLock()
	defer fake.registerResultsMutex.RUnlock()
	return len(fake.registerResultsArgsForCall)
}

func (fake *FakeApiRegistry) RegisterResultsArgsForCall(i int) (net.IP, api.TransferResults) {
	fake.registerResultsMutex.RLock()
	defer fake.registerResultsMutex.RUnlock()
	return fake.registerResultsArgsForCall[i].ip, fake.registerResultsArgsForCall[i].res
}

var _ dispatcher.ApiRegistry = new(FakeApiRegistry)
